// <auto-generated />
using System;
using BookInfo.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace BookInfo.Migrations
{
    [DbContext(typeof(DBContext))]
    [Migration("20220607171826_create")]
    partial class create
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("BookInfo.Models.Author", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MiddleName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Surname")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Authors");
                });

            modelBuilder.Entity("BookInfo.Models.Book", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int?>("AuthorId")
                        .HasColumnType("int");

                    b.Property<int?>("BooksGenreBookId")
                        .HasColumnType("int");

                    b.Property<int?>("BooksGenreGenreId")
                        .HasColumnType("int");

                    b.Property<string>("Cover")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("FavoriteBooksBookId")
                        .HasColumnType("int");

                    b.Property<int?>("FavoriteBooksUserId")
                        .HasColumnType("int");

                    b.Property<long>("Pages")
                        .HasColumnType("bigint");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("AuthorId");

                    b.HasIndex("BooksGenreGenreId", "BooksGenreBookId");

                    b.HasIndex("FavoriteBooksUserId", "FavoriteBooksBookId");

                    b.ToTable("Books");
                });

            modelBuilder.Entity("BookInfo.Models.BooksGenre", b =>
                {
                    b.Property<int>("GenreId")
                        .HasColumnType("int")
                        .HasColumnOrder(2);

                    b.Property<int>("BookId")
                        .HasColumnType("int")
                        .HasColumnOrder(1);

                    b.HasKey("GenreId", "BookId");

                    b.ToTable("BooksGenres");
                });

            modelBuilder.Entity("BookInfo.Models.FavoriteBooks", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int")
                        .HasColumnOrder(2);

                    b.Property<int>("BookId")
                        .HasColumnType("int")
                        .HasColumnOrder(1);

                    b.HasKey("UserId", "BookId");

                    b.ToTable("FavoriteBooks");
                });

            modelBuilder.Entity("BookInfo.Models.Genre", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int?>("BooksGenreBookId")
                        .HasColumnType("int");

                    b.Property<int?>("BooksGenreGenreId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("BooksGenreGenreId", "BooksGenreBookId");

                    b.ToTable("Genres");
                });

            modelBuilder.Entity("BookInfo.Models.Role", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Roles");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "admin"
                        },
                        new
                        {
                            Id = 2,
                            Name = "user"
                        });
                });

            modelBuilder.Entity("BookInfo.Models.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("FavoriteBooksBookId")
                        .HasColumnType("int");

                    b.Property<int?>("FavoriteBooksUserId")
                        .HasColumnType("int");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("RoleId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.HasIndex("FavoriteBooksUserId", "FavoriteBooksBookId");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Email = "admin@mail.ru",
                            Password = "123456",
                            RoleId = 1
                        });
                });

            modelBuilder.Entity("BookInfo.Models.Book", b =>
                {
                    b.HasOne("BookInfo.Models.Author", "Author")
                        .WithMany("Books")
                        .HasForeignKey("AuthorId");

                    b.HasOne("BookInfo.Models.BooksGenre", null)
                        .WithMany("Books")
                        .HasForeignKey("BooksGenreGenreId", "BooksGenreBookId");

                    b.HasOne("BookInfo.Models.FavoriteBooks", null)
                        .WithMany("Books")
                        .HasForeignKey("FavoriteBooksUserId", "FavoriteBooksBookId");

                    b.Navigation("Author");
                });

            modelBuilder.Entity("BookInfo.Models.Genre", b =>
                {
                    b.HasOne("BookInfo.Models.BooksGenre", null)
                        .WithMany("Genres")
                        .HasForeignKey("BooksGenreGenreId", "BooksGenreBookId");
                });

            modelBuilder.Entity("BookInfo.Models.User", b =>
                {
                    b.HasOne("BookInfo.Models.Role", "Role")
                        .WithMany("Users")
                        .HasForeignKey("RoleId");

                    b.HasOne("BookInfo.Models.FavoriteBooks", null)
                        .WithMany("Users")
                        .HasForeignKey("FavoriteBooksUserId", "FavoriteBooksBookId");

                    b.Navigation("Role");
                });

            modelBuilder.Entity("BookInfo.Models.Author", b =>
                {
                    b.Navigation("Books");
                });

            modelBuilder.Entity("BookInfo.Models.BooksGenre", b =>
                {
                    b.Navigation("Books");

                    b.Navigation("Genres");
                });

            modelBuilder.Entity("BookInfo.Models.FavoriteBooks", b =>
                {
                    b.Navigation("Books");

                    b.Navigation("Users");
                });

            modelBuilder.Entity("BookInfo.Models.Role", b =>
                {
                    b.Navigation("Users");
                });
#pragma warning restore 612, 618
        }
    }
}
